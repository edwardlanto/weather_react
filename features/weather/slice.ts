import {
  createAsyncThunk,
  createSlice,
} from '@reduxjs/toolkit';
import axios from 'axios';
import type { RootState } from '../../store';

interface ICity {
  coords: {
    latitude: number,
    longitude: number
  },
  name: string,
  country: string
}

// here we are typing the types for the state
export type WeatherState = {
  list: any[],
  pending: boolean;
  error: boolean;
  current: any,
  city: ICity
};

const initialState: WeatherState = {
  list: [],
  pending: false,
  error: false,
  current: {},
  city: {
    coords: {
      latitude: 0,
      longitude: 0
    },
    name: "",
    country: ""
  }
};

// This action is what we will call using the dispatch in order to trigger the API call.
export const getWeather = createAsyncThunk('weather/get', async () => {
  const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?lat=49.2187112&lon=-123.0818808&appid=${process.env.OPEN_WEATHER_API}&mode=json&units=metric`);

  return response.data;
});

export const WeatherSlice = createSlice({
  name: 'weather',
  initialState,
  reducers: {
// leave this empty here
  },
// The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices. 
// Since this is an API call we have 3 possible outcomes: pending, fulfilled and rejected. We have made allocations for all 3 outcomes. 
// Doing this is good practice as we can tap into the status of the API call and give our users an idea of what's happening in the background.
  extraReducers: builder => {
    builder
      .addCase(getWeather.pending, state => {
        state.pending = true;
      })
      .addCase(getWeather.fulfilled, (state, { payload }) => {
        payload.list.splice(1, 1);
        state.pending = false;
        state.list = payload.list;
        state.current = payload.list[0];
        state.city = payload.city;

      })
      .addCase(getWeather.rejected, state => {
        state.pending = false;
        state.error = true;
      });
  },
});
export const selectWeather = (state: RootState) => state.weather;
export default WeatherSlice.reducer;


// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
// import axios from 'axios';
// import type { RootState } from '../../store';
// import { useAppDispatch, useAppSelector } from '../../hooks';

// export type weatherState = {
//   data: any;
//   list: any[],
//   loading: boolean;
//   error: boolean;
// };

// const initialState: weatherState = {
//   data: { quote: 'click that button' },
//   list: [],
//   loading: false,
//   error: false,
// };

// // This action is what we will call using the dispatch in order to trigger the API call.
// export const getWeather = createAsyncThunk('weather/weather', async () => {

//   const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?lat=49.2187112&lon=-123.0818808&appid=${process.env.OPEN_WEATHER_API}&mode=json&units=metric`);

//   return response.data;
// });


// export default weatherSlice.reducer;
